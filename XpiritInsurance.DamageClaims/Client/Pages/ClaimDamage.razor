@page "/claimdamage"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using XpiritInsurance.DamageClaims.Client.Models
@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar

<h1>Claim damage or loss</h1>

<MudDialog @bind-IsVisible="_dialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Specify claim
        </MudText>
    </TitleContent>
    <DialogContent>
        <p>How much money do you want to claim?</p>
        <MudNumericField @bind-Value="_claimAmount" Class="mt-3" Min="1" Max="100" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="px-10">Ok</MudButton>
        <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="() => _dialogIsVisible = false">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<div class="contentDiv">
    @if (_insurances == null || _existingDamageClaims == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <MudSimpleTable Style="overflow-x: auto;" Hover="true" Striped="true">
            <thead>
                <tr>
                    <th>Insurance</th>
                    <th>Monthly amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var insurance in _insurances)
                {
                    <tr>
                        <td>@insurance.InsuranceType</td>
                        @if (TryGetDamageClaim(insurance.InsuranceType) == null)
                        {
                            <td><MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="() => SpecifyDamageClaim(insurance.InsuranceType)">Claim</MudButton></td>
                        }
                        else
                        {
                            <td>Approval pending for claim of @(GetDamageClaimAmount(insurance.InsuranceType))€</td>
                        }
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }

</div>

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}


@code {
    private List<Insurance> _insurances = new();
    private List<DamageClaim> _existingDamageClaims = new();
    private DamageClaim? _damageClaim;

    private int _claimAmount = 0;
    private bool _isLoading = false;

    private bool _dialogIsVisible;
    private DialogOptions dialogOptions = new() 
    {
        FullWidth = true 
    };

    private DamageClaim? TryGetDamageClaim(InsuranceType insuranceType)
    {
        return _existingDamageClaims.SingleOrDefault(dc => dc.InsuranceType == insuranceType);
    }

    private decimal GetDamageClaimAmount(InsuranceType insuranceType)
    {
        var existing = _existingDamageClaims.Single(dc => dc.InsuranceType == insuranceType);
        return existing.Amount;
    }

    private async Task Submit()
    {
        _dialogIsVisible = false;
        if (_claimAmount < 1) return;

        try
        {
            _isLoading = true;
            _damageClaim = _damageClaim! with { Amount = _claimAmount };

            var response = await Http.PostAsJsonAsync<DamageClaim>($"damageclaim", _damageClaim);
            response.EnsureSuccessStatusCode();
            Snackbar.Add($"Claimed damage for {_damageClaim.InsuranceType} with amount {_claimAmount}€.", Severity.Info);

            //refresh UI
            await LoadData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Claim submit failed: {ex.Message}", Severity.Warning);
        }
        finally
        {
            _isLoading = false;
        }

    }

    protected override Task OnInitializedAsync()
    {
        return LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        try
        {
            var insurances = await Http.GetFromJsonAsync<IEnumerable<Insurance>>("insurance");
            if (insurances != null)
            {
                _insurances.Clear();
                _insurances.AddRange(insurances);
            }
            var existingDamageClaims = await Http.GetFromJsonAsync<IEnumerable<DamageClaim>>("damageclaim");
            if (existingDamageClaims != null)
            {
                _existingDamageClaims.Clear();
                _existingDamageClaims.AddRange(existingDamageClaims);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Insurance or damage claim fetch failed: {ex.Message}", Severity.Warning);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void SpecifyDamageClaim(InsuranceType insuranceType)
    {
        _damageClaim = new DamageClaim(null, insuranceType, 0);
        _dialogIsVisible = true;
    }
}
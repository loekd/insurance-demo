@page "/tokens"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.IdentityModel.Tokens.Jwt;
@using Newtonsoft.Json;

@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<h1>Tokens</h1>

<div class="contentDiv">

    <span>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="async () => { _token = await GetJwtToken(TokenType.IdToken); }">Show ID token</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="async () => { _token = await GetJwtToken(TokenType.AccessToken); }">Show Access token</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="async () => { _token = await GetJwtToken(TokenType.RefreshToken); }">Show Refresh token</MudButton>
    </span>
    <span>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="async () => { _token = await GetJwtToken(TokenType.IdToken, true); }">Show decoded ID token</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="async () => { _token = await GetJwtToken(TokenType.AccessToken, true); }">Show decoded Access token</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="async () => { _token = await GetJwtToken(TokenType.RefreshToken, true); }">Show decoded Refresh token</MudButton>
    </span>

    @if (_token != null)
    {
        <pre><MudTextField @bind-Value="_token" ReadOnly="true" Label="token" Lines="20" /></pre>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => _token = null">Clear</MudButton>
    }

</div>


@code {
   
    private MarkupString? _token;
    private enum TokenType
    {
        IdToken = 0,
        AccessToken = 1,
        RefreshToken = 2
    }

    /// <summary>
    /// Gets the raw JWT id_token.
    /// </summary>
    /// <returns></returns>
    private async Task<MarkupString?> GetJwtToken(TokenType tokenType, bool decodeTokens = false)
    {
        string token;
        string method;
        switch (tokenType)
        {
            case TokenType.AccessToken:
                method = "getAccessToken";
                break;

            case TokenType.IdToken:
                method = "getIdToken";
                break;

            default:
                method = "getRefreshToken";
                break;
        }

        // Uses MSAL when working with AAD only
        token = await this.JSRuntime.InvokeAsync<string>(method);

        if (string.IsNullOrWhiteSpace(token))
        {
            Snackbar.Add($"Token fetch failed", Severity.Warning);
            return null;
        }
        
        if (decodeTokens)
        {
            JwtSecurityToken parsed = new JwtSecurityToken(token);
            token = parsed.ToString();

            int index = token.IndexOf("}.{", StringComparison.InvariantCulture);
            if (index > 0)
            {
                string kid = token.Substring(0, index + 1);
                string body = token.Substring(index + 2);

                kid = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(kid), Formatting.Indented);
                body = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(body), Formatting.Indented);
                return (MarkupString)$"{kid}\n.\n{body}";
            }
            else
            {
                token = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(token.Substring(0, token.Length-1)), Formatting.Indented);
                return (MarkupString)$"{token}\n.";
            }

        }
        else
        {
            return (MarkupString)token;
        }
    }
}

@page "/quotes"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using XpiritInsurance.Sales.Client.Models
@using System.IdentityModel.Tokens.Jwt;

@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<h1>Quotes</h1>

<div class="contentDiv">
    <MudSimpleTable Style="overflow-x: auto;" Hover="true" Striped="true">
        <thead>
            <tr>
                <th>Insurance Type</th>
                <th>Amount per mont</th>
                <th>Quote</th>
                <th>Buy</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var quote in _quoteTypes)
            {
                <tr>
                    <td>@quote.Key</td>
                    <td>@quote.Value</td>
                    @if (TryGetExistingInsurance(quote.Key) != null)
                    {
                        <td />
                        <td>Insured for @(GetInsuranceMonthlyDue(quote.Key))€ per month</td>
                    }
                    else if (TryGetExistingQuote(quote.Key) != null)
                    {
                        <td>Quote for @(GetQuoteMonthlyDue(quote.Key))€ per month</td>
                        <td><MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="() => Buy(quote.Key)">Buy this</MudButton></td>
                    }
                    else
                    {
                        <td><MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="() => GetQuote(quote.Key)">Get quote</MudButton></td>
                        <td />
                    }
                </tr>
            }
        </tbody>
    </MudSimpleTable>
</div>

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private List<Insurance> _insurances = new();
    private List<Quote> _quotes = new();
    private Dictionary<string, decimal?> _quoteTypes = new();
    private bool _isLoading = false;

    protected override Task OnInitializedAsync()
    {
        return LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;

        _quoteTypes.Clear();
        foreach (var insuranceType in Enum.GetNames(typeof(InsuranceType)))
        {
            _quoteTypes.Add(insuranceType, null);
        }
        try
        {

            var data = await Http.GetFromJsonAsync<IEnumerable<Insurance>>("insurances");
            if (data != null)
            {
                _insurances.Clear();
                _insurances.AddRange(data);
            }

            var quotes = await Http.GetFromJsonAsync<IEnumerable<Quote>>("quotes");
            if (quotes != null)
            {
                _quotes.Clear();
                _quotes.AddRange(quotes);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fetching insurances failed: {ex.Message}", Severity.Warning);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Insurance? TryGetExistingInsurance(string insuranceType)
    {
        var it = (InsuranceType)Enum.Parse(typeof(InsuranceType), insuranceType);
        return _insurances.SingleOrDefault(dc => dc.InsuranceType == it);
    }

    private Quote? TryGetExistingQuote(string insuranceType)
    {
        var it = (InsuranceType)Enum.Parse(typeof(InsuranceType), insuranceType);
        return _quotes.SingleOrDefault(dc => dc.InsuranceType == it);
    }

    private decimal GetInsuranceMonthlyDue(string insuranceType)
    {
        var it = (InsuranceType)Enum.Parse(typeof(InsuranceType), insuranceType);
        var existing = _insurances.Single(dc => dc.InsuranceType == it);
        return existing.AmountPerMonth;
    }

    private decimal GetQuoteMonthlyDue(string insuranceType)
    {
        var it = (InsuranceType)Enum.Parse(typeof(InsuranceType), insuranceType);
        var existing = _quotes.Single(dc => dc.InsuranceType == it);
        return existing.AmountPerMonth;
    }

    private async Task GetQuote(string insuranceType)
    {
        try
        {
            _isLoading = true;
            var it = (InsuranceType)Enum.Parse(typeof(InsuranceType), insuranceType);
            var quote = await Http.PostAsJsonAsync<Quote>($"quotes", new Quote("", it, 0m, Guid.NewGuid()));
            quote.EnsureSuccessStatusCode();
            await LoadData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Get quote failed: {ex.Message}", Severity.Warning);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task Buy(string insuranceType)
    {
        try
        {
            _isLoading = true;

            var it = (InsuranceType)Enum.Parse(typeof(InsuranceType), insuranceType);
            var quote = _quotes.SingleOrDefault(q => q.InsuranceType == it);
            if (quote != null)
            {
                HttpResponseMessage? response;
                switch(it)
                {
                    case InsuranceType.Health :
                        response = await Http.PostAsJsonAsync<Quote>($"insurances/official", quote);
                        break;
                    default:
                        response = await Http.PostAsJsonAsync<Quote>($"insurances", quote);
                        break;
                }                
                response.EnsureSuccessStatusCode();
                Snackbar.Add($"Bought {insuranceType} insurance.", Severity.Info);

                //refresh list
                await LoadData();
            }
            else
            {
                Snackbar.Add("Get a quote first!", Severity.Error);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Buy insurance failed: {ex.Message}", Severity.Warning);
        }
        finally
        {
            _isLoading = false;
        }
    }

}